
declare
    -- Procedure which does group by information
    CREATE OR REPLACE PROCEDURE group_by_infromation
    is
    begin
        for book in (Select genre, AVG(price) as avg_price,count(*) as num_books from books
            group by genre) loop
            dbms_output.put_line('Genre: ' || book.genre || '- Average Price: ' || book.avg_price || '- Number of books: ' || book.num_books);
        end loop;
    end;
    --Function which counts the number of records 
    CREATE OR REPLACE function numOfrec(table_name in varchar)
    return integer is num integer;
    begin
        execute immediate 'SELECT count(*) from ' || table_name into num;
        return num;
    end;
    --Procedure which uses SQL%ROWCOUNT to determine the number of rows affected
    CREATE OR REPLACE PROCEDURE update_proccess is
    BEGIN
        update payment
        set status='ready for confirmation'
        where order_id in
            (SELECT order_id from orders
            where sysdate-dateoforder>3);
        update payment
        set status='rejected'
        where order_id in
            (select order_id from orders
            where sysdate-dateoforder>7);
        
        dbms_output.put_line(sql%rowcount);
    end;
    --Add user-defined exception which disallows to enter title of item (e.g. book) to be less than 5 characters
    CREATE OR REPLACE PROCEDURE add_book(p_name varchar, p_genre varchar, p_price varchar, p_publisher_id number, p_author_id number) AS
        len integer;
        notokpub exception;
        notokauth exception;
        notoklen exception;
        auth_id number;
        pub_id number;
    BEGIN
        len := LENGTH(p_name);
        IF len < 5 THEN
            raise notoklen;
        END IF;
        select author_id into auth_id from authors where author_id = p_author_id;
        select publisher_id into pub_id from publishers where publisher_id = p_publisher_id;
        if auth_id is null then
            raise notokauth;
        end if;
        if pub_id is null then
            raise notokpub;
        end if;
        INSERT INTO books(name, genre, price, publisher_id, author_id)
        VALUES (p_name, p_genre, p_price, p_publisher_id, p_author_id);

        DBMS_OUTPUT.PUT_LINE('Book added successfully!');
        commit;
    EXCEPTION
        when notoklen then
            rollback;
            dbms_output.put_line('Book should have at least 5 character');
        when notokauth then
            rollback;
            dbms_output.put_line('There is no author with that id');
        when notokpub then
            rollback;
            dbms_output.put_line('There is no publisher with that id');
    END;
    --Create a trigger before insert on any entity which will show the current number of rows in the table
    create trigger trigger_review
    after insert or delete or update on reviews
    referencing old as o new as n
    for each row
    declare
        numOfrows integer;
    begin
        UPDATE Books
        SET rating = (SELECT avg(rating) FROM Reviews
                        WHERE book_id =: n.book_id)
        WHERE book_id =: n.book_id;
        select count(*) into numOfrows from Reviews;
        dbms_output.put_line(numOfrows);
    end;
